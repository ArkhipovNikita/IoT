# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import math_pb2 as math__pb2


class MathStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.get_sqrt = channel.unary_unary(
                '/Math/get_sqrt',
                request_serializer=math__pb2.SqrtRequest.SerializeToString,
                response_deserializer=math__pb2.SqrtResponse.FromString,
                )
        self.get_std = channel.stream_unary(
                '/Math/get_std',
                request_serializer=math__pb2.StdRequest.SerializeToString,
                response_deserializer=math__pb2.StdResponse.FromString,
                )
        self.get_multipliers = channel.unary_stream(
                '/Math/get_multipliers',
                request_serializer=math__pb2.MultipliersRequest.SerializeToString,
                response_deserializer=math__pb2.MultipliersResponse.FromString,
                )
        self.get_max = channel.stream_stream(
                '/Math/get_max',
                request_serializer=math__pb2.MaxRequest.SerializeToString,
                response_deserializer=math__pb2.MaxResponse.FromString,
                )


class MathServicer(object):
    """Missing associated documentation comment in .proto file."""

    def get_sqrt(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def get_std(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def get_multipliers(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def get_max(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_MathServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'get_sqrt': grpc.unary_unary_rpc_method_handler(
                    servicer.get_sqrt,
                    request_deserializer=math__pb2.SqrtRequest.FromString,
                    response_serializer=math__pb2.SqrtResponse.SerializeToString,
            ),
            'get_std': grpc.stream_unary_rpc_method_handler(
                    servicer.get_std,
                    request_deserializer=math__pb2.StdRequest.FromString,
                    response_serializer=math__pb2.StdResponse.SerializeToString,
            ),
            'get_multipliers': grpc.unary_stream_rpc_method_handler(
                    servicer.get_multipliers,
                    request_deserializer=math__pb2.MultipliersRequest.FromString,
                    response_serializer=math__pb2.MultipliersResponse.SerializeToString,
            ),
            'get_max': grpc.stream_stream_rpc_method_handler(
                    servicer.get_max,
                    request_deserializer=math__pb2.MaxRequest.FromString,
                    response_serializer=math__pb2.MaxResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'Math', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Math(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def get_sqrt(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Math/get_sqrt',
            math__pb2.SqrtRequest.SerializeToString,
            math__pb2.SqrtResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def get_std(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_unary(request_iterator, target, '/Math/get_std',
            math__pb2.StdRequest.SerializeToString,
            math__pb2.StdResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def get_multipliers(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/Math/get_multipliers',
            math__pb2.MultipliersRequest.SerializeToString,
            math__pb2.MultipliersResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def get_max(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/Math/get_max',
            math__pb2.MaxRequest.SerializeToString,
            math__pb2.MaxResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
